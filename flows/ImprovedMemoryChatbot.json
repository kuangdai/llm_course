{"id":"b5ad8cce-dc44-4a51-93f9-edf7b879ffbb","data":{"nodes":[{"data":{"description":"Create a prompt template with dynamic variables.","display_name":"Prompt","id":"Prompt-H6YJY","node":{"template":{"_type":"Component","code":{"advanced":true,"dynamic":true,"fileTypes":[],"file_path":"","info":"","list":false,"load_from_db":false,"multiline":true,"name":"code","password":false,"placeholder":"","required":true,"show":true,"title_case":false,"type":"code","value":"from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom import Component\nfrom langflow.inputs.inputs import DefaultPromptField\nfrom langflow.io import Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(\n        self,\n    ) -> Message:\n        prompt = await Message.from_template_and_variables(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    def post_code_processing(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"\n        This function is called after the code validation is done.\n        \"\"\"\n        frontend_node = super().post_code_processing(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n"},"context":{"field_type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":true,"value":"","fileTypes":[],"file_path":"","name":"context","display_name":"context","advanced":false,"input_types":["Message","Text"],"dynamic":false,"info":"","load_from_db":false,"title_case":false,"type":"str"},"template":{"advanced":false,"display_name":"Template","dynamic":false,"info":"","list":false,"load_from_db":false,"name":"template","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_input":true,"type":"prompt","value":"You are a friendly, knowledgeable assistant. Provide clear, concise, and accurate responses, adapting to the user's tone and needs. If a question requires more depth, acknowledge it and offer guidance or suggest additional resources.\n\n{context}\n\nUser: {user_message}\nAI: "},"user_message":{"field_type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":true,"value":"","fileTypes":[],"file_path":"","name":"user_message","display_name":"user_message","advanced":false,"input_types":["Message","Text"],"dynamic":false,"info":"","load_from_db":false,"title_case":false,"type":"str"}},"description":"Create a prompt template with dynamic variables.","icon":"prompts","is_input":null,"is_output":null,"is_composition":null,"base_classes":["Message"],"name":"","display_name":"Prompt","documentation":"","custom_fields":{"template":["context","user_message"]},"output_types":[],"full_path":null,"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"prompt","hidden":null,"display_name":"Prompt Message","method":"build_prompt","value":"__UNDEFINED__","cache":true}],"field_order":["template"],"beta":false,"error":null,"edited":false,"lf_version":"1.0.18"},"type":"Prompt"},"dragging":false,"height":477,"id":"Prompt-H6YJY","position":{"x":1807.3268107633492,"y":510.7107158773541},"positionAbsolute":{"x":1807.3268107633492,"y":510.7107158773541},"selected":false,"type":"genericNode","width":384},{"data":{"description":"Get chat inputs from the Playground.","display_name":"Chat Input","id":"ChatInput-ezcBW","node":{"base_classes":["Message"],"beta":false,"conditional_paths":[],"custom_fields":{},"description":"Get chat inputs from the Playground.","display_name":"Chat Input","documentation":"","edited":false,"field_order":["input_value","store_message","sender","sender_name","session_id","files"],"frozen":false,"icon":"ChatInput","output_types":[],"outputs":[{"cache":true,"display_name":"Message","method":"message_response","name":"message","selected":"Message","types":["Message"],"value":"__UNDEFINED__"}],"pinned":false,"template":{"_type":"Component","code":{"advanced":true,"dynamic":true,"fileTypes":[],"file_path":"","info":"","list":false,"load_from_db":false,"multiline":true,"name":"code","password":false,"placeholder":"","required":true,"show":true,"title_case":false,"type":"code","value":"from langflow.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import DropdownInput, FileInput, MessageTextInput, MultilineInput, Output\nfrom langflow.memory import store_message\nfrom langflow.schema.message import Message\nfrom langflow.utils.constants import MESSAGE_SENDER_AI, MESSAGE_SENDER_USER, MESSAGE_SENDER_NAME_USER\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"ChatInput\"\n    name = \"ChatInput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            value=\"\",\n            info=\"Message to be passed as input.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_USER,\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_USER,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        FileInput(\n            name=\"files\",\n            display_name=\"Files\",\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n            info=\"Files to be sent with the message.\",\n            advanced=True,\n            is_list=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n            files=self.files,\n        )\n\n        if (\n            self.session_id\n            and isinstance(message, Message)\n            and isinstance(message.text, str)\n            and self.should_store_message\n        ):\n            store_message(\n                message,\n                flow_id=self.graph.flow_id,\n            )\n            self.message.value = message\n\n        self.status = message\n        return message\n"},"files":{"advanced":true,"display_name":"Files","dynamic":false,"fileTypes":["txt","md","mdx","csv","json","yaml","yml","xml","html","htm","pdf","docx","py","sh","sql","js","ts","tsx","jpg","jpeg","png","bmp","image"],"file_path":"","info":"Files to be sent with the message.","list":true,"name":"files","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_metadata":true,"type":"file","value":""},"input_value":{"advanced":false,"display_name":"Text","dynamic":false,"info":"Message to be passed as input.","input_types":["Message"],"list":false,"load_from_db":false,"multiline":true,"name":"input_value","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_input":true,"trace_as_metadata":true,"type":"str","value":"Write a long bedtime story about adventure\n"},"sender":{"advanced":true,"display_name":"Sender Type","dynamic":false,"info":"Type of sender.","name":"sender","options":["Machine","User"],"placeholder":"","required":false,"show":true,"title_case":false,"trace_as_metadata":true,"type":"str","value":"User"},"sender_name":{"advanced":true,"display_name":"Sender Name","dynamic":false,"info":"Name of the sender.","input_types":["Message"],"list":false,"load_from_db":false,"name":"sender_name","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_input":true,"trace_as_metadata":true,"type":"str","value":"User"},"session_id":{"advanced":true,"display_name":"Session ID","dynamic":false,"info":"The session ID of the chat. If empty, the current session ID parameter will be used.","input_types":["Message"],"list":false,"load_from_db":false,"name":"session_id","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_input":true,"trace_as_metadata":true,"type":"str","value":""},"should_store_message":{"_input_type":"BoolInput","advanced":true,"display_name":"Store Messages","dynamic":false,"info":"Store the message in the history.","list":false,"name":"should_store_message","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_metadata":true,"type":"bool","value":true}},"lf_version":"1.0.18"},"type":"ChatInput"},"dragging":false,"height":289,"id":"ChatInput-ezcBW","position":{"x":1333.6146323618916,"y":870.8793545655311},"positionAbsolute":{"x":1333.6146323618916,"y":870.8793545655311},"selected":false,"type":"genericNode","width":384},{"data":{"description":"Display a chat message in the Playground.","display_name":"Chat Output","id":"ChatOutput-v5KjD","node":{"base_classes":["Message"],"beta":false,"conditional_paths":[],"custom_fields":{},"description":"Display a chat message in the Playground.","display_name":"Chat Output","documentation":"","edited":false,"field_order":["input_value","store_message","sender","sender_name","session_id","data_template"],"frozen":false,"icon":"ChatOutput","output_types":[],"outputs":[{"cache":true,"display_name":"Message","method":"message_response","name":"message","selected":"Message","types":["Message"],"value":"__UNDEFINED__"}],"pinned":false,"template":{"_type":"Component","code":{"advanced":true,"dynamic":true,"fileTypes":[],"file_path":"","info":"","list":false,"load_from_db":false,"multiline":true,"name":"code","password":false,"placeholder":"","required":true,"show":true,"title_case":false,"type":"code","value":"from langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import DropdownInput, MessageTextInput, Output\nfrom langflow.memory import store_message\nfrom langflow.schema.message import Message\nfrom langflow.utils.constants import MESSAGE_SENDER_AI, MESSAGE_SENDER_NAME_AI, MESSAGE_SENDER_USER\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"ChatOutput\"\n    name = \"ChatOutput\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n        )\n        if (\n            self.session_id\n            and isinstance(message, Message)\n            and isinstance(message.text, str)\n            and self.should_store_message\n        ):\n            store_message(\n                message,\n                flow_id=self.graph.flow_id,\n            )\n            self.message.value = message\n\n        self.status = message\n        return message\n"},"data_template":{"advanced":true,"display_name":"Data Template","dynamic":false,"info":"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.","input_types":["Message"],"list":false,"load_from_db":false,"name":"data_template","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_input":true,"trace_as_metadata":true,"type":"str","value":"{text}"},"input_value":{"advanced":false,"display_name":"Text","dynamic":false,"info":"Message to be passed as output.","input_types":["Message"],"list":false,"load_from_db":false,"name":"input_value","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_input":true,"trace_as_metadata":true,"type":"str","value":""},"sender":{"advanced":true,"display_name":"Sender Type","dynamic":false,"info":"Type of sender.","name":"sender","options":["Machine","User"],"placeholder":"","required":false,"show":true,"title_case":false,"trace_as_metadata":true,"type":"str","value":"Machine"},"sender_name":{"advanced":true,"display_name":"Sender Name","dynamic":false,"info":"Name of the sender.","input_types":["Message"],"list":false,"load_from_db":false,"name":"sender_name","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_input":true,"trace_as_metadata":true,"type":"str","value":"AI"},"session_id":{"advanced":true,"display_name":"Session ID","dynamic":false,"info":"The session ID of the chat. If empty, the current session ID parameter will be used.","input_types":["Message"],"list":false,"load_from_db":false,"name":"session_id","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_input":true,"trace_as_metadata":true,"type":"str","value":""},"should_store_message":{"_input_type":"BoolInput","advanced":true,"display_name":"Store Messages","dynamic":false,"info":"Store the message in the history.","list":false,"name":"should_store_message","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_metadata":true,"type":"bool","value":true}},"lf_version":"1.0.18"},"type":"ChatOutput"},"height":289,"id":"ChatOutput-v5KjD","position":{"x":3172.221520648915,"y":524.1858897960849},"selected":false,"type":"genericNode","width":384,"positionAbsolute":{"x":3172.221520648915,"y":524.1858897960849},"dragging":false},{"data":{"description":"Retrieves stored chat messages from Langflow tables or an external memory.","display_name":"Chat Memory","id":"Memory-tyOj3","node":{"base_classes":["BaseChatMemory","Data","Message"],"beta":false,"conditional_paths":[],"custom_fields":{},"description":"Retrieves stored chat messages from Langflow tables or an external memory.","display_name":"Chat Memory","documentation":"","edited":false,"field_order":["memory","sender","sender_name","n_messages","session_id","order","template"],"frozen":false,"icon":"message-square-more","output_types":[],"outputs":[{"cache":true,"display_name":"Messages (Data)","method":"retrieve_messages","name":"messages","selected":"Data","types":["Data"],"value":"__UNDEFINED__"},{"cache":true,"display_name":"Messages (Text)","method":"retrieve_messages_as_text","name":"messages_text","selected":"Message","types":["Message"],"value":"__UNDEFINED__"},{"cache":true,"display_name":"Memory","method":"build_lc_memory","name":"lc_memory","selected":"BaseChatMemory","types":["BaseChatMemory"],"value":"__UNDEFINED__"}],"pinned":false,"template":{"_type":"Component","code":{"advanced":true,"dynamic":true,"fileTypes":[],"file_path":"","info":"","list":false,"load_from_db":false,"multiline":true,"name":"code","password":false,"placeholder":"","required":true,"show":true,"title_case":false,"type":"code","value":"from langchain.memory import ConversationBufferMemory\n\nfrom langflow.custom import Component\nfrom langflow.field_typing import BaseChatMemory\nfrom langflow.helpers.data import data_to_text\nfrom langflow.inputs import HandleInput\nfrom langflow.io import DropdownInput, IntInput, MessageTextInput, MultilineInput, Output\nfrom langflow.memory import LCBuiltinChatMemory, get_messages\nfrom langflow.schema import Data\nfrom langflow.schema.message import Message\nfrom langflow.utils.constants import MESSAGE_SENDER_AI, MESSAGE_SENDER_USER\n\n\nclass MemoryComponent(Component):\n    display_name = \"Chat Memory\"\n    description = \"Retrieves stored chat messages from Langflow tables or an external memory.\"\n    icon = \"message-square-more\"\n    name = \"Memory\"\n\n    inputs = [\n        HandleInput(\n            name=\"memory\",\n            display_name=\"External Memory\",\n            input_types=[\"BaseChatMessageHistory\"],\n            info=\"Retrieve messages from an external memory. If empty, it will use the Langflow tables.\",\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER, \"Machine and User\"],\n            value=\"Machine and User\",\n            info=\"Filter by sender type.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Filter by sender name.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"n_messages\",\n            display_name=\"Number of Messages\",\n            value=100,\n            info=\"Number of messages to retrieve.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"order\",\n            display_name=\"Order\",\n            options=[\"Ascending\", \"Descending\"],\n            value=\"Ascending\",\n            info=\"Order of the messages.\",\n            advanced=True,\n        ),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {sender} or any other key in the message data.\",\n            value=\"{sender_name}: {text}\",\n            advanced=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Messages (Data)\", name=\"messages\", method=\"retrieve_messages\"),\n        Output(display_name=\"Messages (Text)\", name=\"messages_text\", method=\"retrieve_messages_as_text\"),\n        Output(display_name=\"Memory\", name=\"lc_memory\", method=\"build_lc_memory\"),\n    ]\n\n    def retrieve_messages(self) -> Data:\n        sender = self.sender\n        sender_name = self.sender_name\n        session_id = self.session_id\n        n_messages = self.n_messages\n        order = \"DESC\" if self.order == \"Descending\" else \"ASC\"\n\n        if sender == \"Machine and User\":\n            sender = None\n\n        if self.memory:\n            # override session_id\n            self.memory.session_id = session_id\n\n            stored = self.memory.messages\n            # langchain memories are supposed to return messages in ascending order\n            if order == \"DESC\":\n                stored = stored[::-1]\n            if n_messages:\n                stored = stored[:n_messages]\n            stored = [Message.from_lc_message(m) for m in stored]\n            if sender:\n                expected_type = MESSAGE_SENDER_AI if sender == MESSAGE_SENDER_AI else MESSAGE_SENDER_USER\n                stored = [m for m in stored if m.type == expected_type]\n        else:\n            stored = get_messages(\n                sender=sender,\n                sender_name=sender_name,\n                session_id=session_id,\n                limit=n_messages,\n                order=order,\n            )\n        self.status = stored\n        return stored\n\n    def retrieve_messages_as_text(self) -> Message:\n        stored_text = data_to_text(self.template, self.retrieve_messages())\n        self.status = stored_text\n        return Message(text=stored_text)\n\n    def build_lc_memory(self) -> BaseChatMemory:\n        if self.memory:\n            chat_memory = self.memory\n        else:\n            chat_memory = LCBuiltinChatMemory(flow_id=self.flow_id, session_id=self.session_id)\n        return ConversationBufferMemory(chat_memory=chat_memory)\n"},"memory":{"advanced":false,"display_name":"External Memory","dynamic":false,"info":"Retrieve messages from an external memory. If empty, it will use the Langflow tables.","input_types":["BaseChatMessageHistory"],"list":false,"name":"memory","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_metadata":true,"type":"other","value":""},"n_messages":{"advanced":true,"display_name":"Number of Messages","dynamic":false,"info":"Number of messages to retrieve.","list":false,"name":"n_messages","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_metadata":true,"type":"int","value":100},"order":{"advanced":true,"display_name":"Order","dynamic":false,"info":"Order of the messages.","name":"order","options":["Ascending","Descending"],"placeholder":"","required":false,"show":true,"title_case":false,"trace_as_metadata":true,"type":"str","value":"Ascending"},"sender":{"advanced":true,"display_name":"Sender Type","dynamic":false,"info":"Filter by sender type.","name":"sender","options":["Machine","User","Machine and User"],"placeholder":"","required":false,"show":true,"title_case":false,"trace_as_metadata":true,"type":"str","value":"Machine and User"},"sender_name":{"advanced":true,"display_name":"Sender Name","dynamic":false,"info":"Filter by sender name.","input_types":["Message"],"list":false,"load_from_db":false,"name":"sender_name","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_input":true,"trace_as_metadata":true,"type":"str","value":""},"session_id":{"advanced":true,"display_name":"Session ID","dynamic":false,"info":"The session ID of the chat. If empty, the current session ID parameter will be used.","input_types":["Message"],"list":false,"load_from_db":false,"name":"session_id","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_input":true,"trace_as_metadata":true,"type":"str","value":""},"template":{"advanced":true,"display_name":"Template","dynamic":false,"info":"The template to use for formatting the data. It can contain the keys {text}, {sender} or any other key in the message data.","input_types":["Message"],"list":false,"load_from_db":false,"multiline":true,"name":"template","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_input":true,"trace_as_metadata":true,"type":"str","value":"{sender_name}: {text}"}},"lf_version":"1.0.18"},"type":"Memory"},"dragging":false,"height":347,"id":"Memory-tyOj3","position":{"x":1337.032112405416,"y":432.26398122471},"positionAbsolute":{"x":1337.032112405416,"y":432.26398122471},"selected":false,"type":"genericNode","width":384},{"id":"MyLLMModel-4Zth5","type":"genericNode","position":{"x":2261.3637629671266,"y":455.13840348424196},"data":{"type":"MyLLMModel","node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from typing import List, Optional, Any\n\nimport requests\nfrom langchain.callbacks.manager import CallbackManagerForLLMRun\nfrom langchain.schema import LLMResult, Generation\nfrom langchain_core.language_models import BaseLLM\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.field_typing import LanguageModel\nfrom langflow.inputs import (\n    StrInput,\n    FloatInput,\n    IntInput,\n)\n\n\nclass CustomLLMComponent(LCModelComponent):\n    display_name = \"My LLM\"\n    description = \"Generates text using a custom LLM server.\"\n    icon = \"Heart\"\n    name = \"MyLLMModel\"\n\n    inputs = LCModelComponent._base_inputs + [\n        StrInput(\n            name=\"llm_server_url\",\n            display_name=\"LLM Server URL\",\n            advanced=False,\n            info=\"URL for the custom LLM server.\",\n            value=\"https://ABC.loca.lt\",\n        ),\n        FloatInput(\n            name=\"temperature\",\n            display_name=\"Temperature\",\n            value=0.7,\n            info=\"Sampling temperature for text generation.\",\n            advanced=False,\n        ),\n        IntInput(\n            name=\"max_new_tokens\",\n            display_name=\"Max New Tokens\",\n            value=50,\n            info=\"Maximum number of tokens to generate.\",\n            advanced=False,\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:\n        # Instantiate CustomLLM with the appropriate parameters\n        return self.CustomLLM(\n            llm_server_url=(self.llm_server_url or \"https://ABC.loca.lt\") + \"/generate\",\n            temperature=self.temperature,\n            max_new_tokens=self.max_new_tokens\n        )\n\n    class CustomLLM(BaseLLM):\n        \"\"\"Wrapper class for custom LLM model to comply with the LanguageModel interface.\"\"\"\n\n        # Define fields as class-level variables\n        llm_server_url: str\n        temperature: float\n        max_new_tokens: int\n\n        def _call(\n                self,\n                prompt: str,\n                stop: Optional[List[str]] = None,  # noqa\n                run_manager: Optional[CallbackManagerForLLMRun] = None,  # noqa\n                **kwargs: Any,  # noqa\n        ) -> str:\n            \"\"\"Generate text from the custom LLM model.\"\"\"\n            payload = {\n                \"text\": prompt,\n                \"temperature\": self.temperature,\n                \"max_new_tokens\": self.max_new_tokens\n            }\n            headers = {\n                \"Content-Type\": \"application/json\"\n            }\n            try:\n                response = requests.post(self.llm_server_url, json=payload, headers=headers)\n                response.raise_for_status()\n                result = response.json()\n                return result.get(\"generated_text\", \"No generated text returned.\")\n            except requests.RequestException as e:\n                return f\"Error generating text: {e}\"\n\n        def _generate(\n                self,\n                prompts: List[str],\n                stop: Optional[List[str]] = None,\n                run_manager: Optional[CallbackManagerForLLMRun] = None,\n                **kwargs: Any,\n        ) -> LLMResult:\n            \"\"\"Implements the required _generate method to handle batch generation.\"\"\"\n            generations = []\n            for prompt in prompts:\n                text = self._call(prompt, stop=stop, run_manager=run_manager, **kwargs)\n                generations.append([Generation(text=text)])\n\n            return LLMResult(generations=generations)\n\n        @property\n        def _llm_type(self) -> str:\n            return \"custom_llm\"","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"input_value":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"input_value","value":"","display_name":"Input","advanced":false,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"MessageInput"},"llm_server_url":{"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"llm_server_url","value":"https://ABC.loca.lt","display_name":"LLM Server URL","advanced":false,"dynamic":false,"info":"URL for the custom LLM server.","title_case":false,"type":"str","_input_type":"StrInput"},"max_new_tokens":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"name":"max_new_tokens","value":50,"display_name":"Max New Tokens","advanced":false,"dynamic":false,"info":"Maximum number of tokens to generate.","title_case":false,"type":"int","_input_type":"IntInput"},"stream":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"name":"stream","value":false,"display_name":"Stream","advanced":true,"dynamic":false,"info":"Stream the response from the model. Streaming works only in Chat.","title_case":false,"type":"bool","_input_type":"BoolInput"},"system_message":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"system_message","value":"","display_name":"System Message","advanced":true,"input_types":["Message"],"dynamic":false,"info":"System message to pass to the model.","title_case":false,"type":"str","_input_type":"MessageTextInput"},"temperature":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"name":"temperature","value":0.1,"display_name":"Temperature","advanced":false,"dynamic":false,"info":"Sampling temperature for text generation.","title_case":false,"type":"float","_input_type":"FloatInput","load_from_db":false}},"description":"Generates text using a custom LLM server.","icon":"Heart","base_classes":["LanguageModel","Message"],"display_name":"My LLM","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"text_output","display_name":"Text","method":"text_response","value":"__UNDEFINED__","cache":true},{"types":["LanguageModel"],"selected":"LanguageModel","name":"model_output","display_name":"Language Model","method":"build_model","value":"__UNDEFINED__","cache":true}],"field_order":["input_value","system_message","stream","llm_server_url","temperature","max_new_tokens"],"beta":false,"edited":true,"lf_version":"1.0.18"},"id":"MyLLMModel-4Zth5"},"selected":false,"width":384,"height":587,"dragging":false,"positionAbsolute":{"x":2261.3637629671266,"y":455.13840348424196}},{"id":"SingleTurnFilter-3TVfr","type":"genericNode","position":{"x":2718.02060091873,"y":515.8072815253249},"data":{"type":"ResponseFilter","node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.custom import Component\nfrom langflow.io import MessageTextInput, Output\nfrom langflow.schema.message import Message\n\nclass SingleTurnFilterComponent(Component):\n    display_name = \"Response Filter\"\n    description = \"Removes multi-turn conversation markers (e.g., '\\\\nUser:', '\\\\nAI:') and ensures responses end with complete sentences.\"\n    icon = \"scissors-line-dashed\"\n    name = \"ResponseFilter\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"text\",\n            display_name=\"Text\",\n            info=\"The input text containing conversation segments.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Filtered Response\", name=\"filtered_response\", method=\"filter\"),\n    ]\n\n    def filter(self) -> Message:\n        # Access the input text directly\n        text = self.text\n\n        # Step 1: Remove multi-turn conversation markers, keeping only the initial response\n        filtered_response = text.split(\"\\nUser:\")[0].split(\"\\nAI:\")[0].strip()\n\n        # Step 2: Check for sentence-ending punctuation in the filtered response\n        sentence_endings = [\".\", \"!\", \"?\", \"…\", \"...\"]\n        if not any(filtered_response.endswith(p) for p in sentence_endings):\n            # If no sentence-ending punctuation, truncate to the last complete sentence\n            last_punctuation_index = max(filtered_response.rfind(p) for p in sentence_endings)\n            if last_punctuation_index != -1:\n                filtered_response = filtered_response[:last_punctuation_index + 1]\n        \n        # Set the component status and return the filtered response as a Message\n        self.status = filtered_response\n        return Message(text=filtered_response)\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"text":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"text","value":"","display_name":"Text","advanced":false,"input_types":["Message"],"dynamic":false,"info":"The input text containing conversation segments.","title_case":false,"type":"str","_input_type":"MessageTextInput"}},"description":"Removes multi-turn conversation markers (e.g., '\\nUser:', '\\nAI:') and ensures responses end with complete sentences.","icon":"scissors-line-dashed","base_classes":["Message"],"display_name":"Response Filter","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"filtered_response","display_name":"Filtered Response","method":"filter","value":"__UNDEFINED__","cache":true}],"field_order":["text"],"beta":false,"edited":true,"lf_version":"1.0.18"},"id":"SingleTurnFilter-3TVfr"},"selected":false,"width":384,"height":321,"positionAbsolute":{"x":2718.02060091873,"y":515.8072815253249},"dragging":false}],"edges":[{"className":"","data":{"sourceHandle":{"dataType":"ChatInput","id":"ChatInput-ezcBW","name":"message","output_types":["Message"]},"targetHandle":{"fieldName":"user_message","id":"Prompt-H6YJY","inputTypes":["Message","Text"],"type":"str"}},"id":"reactflow__edge-ChatInput-ezcBW{œdataTypeœ:œChatInputœ,œidœ:œChatInput-ezcBWœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-Prompt-H6YJY{œfieldNameœ:œuser_messageœ,œidœ:œPrompt-H6YJYœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}","source":"ChatInput-ezcBW","sourceHandle":"{œdataTypeœ:œChatInputœ,œidœ:œChatInput-ezcBWœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}","target":"Prompt-H6YJY","targetHandle":"{œfieldNameœ:œuser_messageœ,œidœ:œPrompt-H6YJYœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}","animated":false},{"className":"","data":{"sourceHandle":{"dataType":"Memory","id":"Memory-tyOj3","name":"messages_text","output_types":["Message"]},"targetHandle":{"fieldName":"context","id":"Prompt-H6YJY","inputTypes":["Message","Text"],"type":"str"}},"id":"reactflow__edge-Memory-tyOj3{œdataTypeœ:œMemoryœ,œidœ:œMemory-tyOj3œ,œnameœ:œmessages_textœ,œoutput_typesœ:[œMessageœ]}-Prompt-H6YJY{œfieldNameœ:œcontextœ,œidœ:œPrompt-H6YJYœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}","source":"Memory-tyOj3","sourceHandle":"{œdataTypeœ:œMemoryœ,œidœ:œMemory-tyOj3œ,œnameœ:œmessages_textœ,œoutput_typesœ:[œMessageœ]}","target":"Prompt-H6YJY","targetHandle":"{œfieldNameœ:œcontextœ,œidœ:œPrompt-H6YJYœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}","animated":false},{"source":"Prompt-H6YJY","sourceHandle":"{œdataTypeœ:œPromptœ,œidœ:œPrompt-H6YJYœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}","target":"MyLLMModel-4Zth5","targetHandle":"{œfieldNameœ:œinput_valueœ,œidœ:œMyLLMModel-4Zth5œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"input_value","id":"MyLLMModel-4Zth5","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"Prompt","id":"Prompt-H6YJY","name":"prompt","output_types":["Message"]}},"id":"reactflow__edge-Prompt-H6YJY{œdataTypeœ:œPromptœ,œidœ:œPrompt-H6YJYœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-MyLLMModel-4Zth5{œfieldNameœ:œinput_valueœ,œidœ:œMyLLMModel-4Zth5œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","className":"","animated":false},{"source":"MyLLMModel-4Zth5","sourceHandle":"{œdataTypeœ:œMyLLMModelœ,œidœ:œMyLLMModel-4Zth5œ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}","target":"SingleTurnFilter-3TVfr","targetHandle":"{œfieldNameœ:œtextœ,œidœ:œSingleTurnFilter-3TVfrœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"text","id":"SingleTurnFilter-3TVfr","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"MyLLMModel","id":"MyLLMModel-4Zth5","name":"text_output","output_types":["Message"]}},"id":"reactflow__edge-MyLLMModel-4Zth5{œdataTypeœ:œMyLLMModelœ,œidœ:œMyLLMModel-4Zth5œ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}-SingleTurnFilter-3TVfr{œfieldNameœ:œtextœ,œidœ:œSingleTurnFilter-3TVfrœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","className":"","animated":false},{"source":"SingleTurnFilter-3TVfr","sourceHandle":"{œdataTypeœ:œResponseFilterœ,œidœ:œSingleTurnFilter-3TVfrœ,œnameœ:œfiltered_responseœ,œoutput_typesœ:[œMessageœ]}","target":"ChatOutput-v5KjD","targetHandle":"{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-v5KjDœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"input_value","id":"ChatOutput-v5KjD","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"ResponseFilter","id":"SingleTurnFilter-3TVfr","name":"filtered_response","output_types":["Message"]}},"id":"reactflow__edge-SingleTurnFilter-3TVfr{œdataTypeœ:œResponseFilterœ,œidœ:œSingleTurnFilter-3TVfrœ,œnameœ:œfiltered_responseœ,œoutput_typesœ:[œMessageœ]}-ChatOutput-v5KjD{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-v5KjDœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","animated":false,"className":""}],"viewport":{"x":-696.7067744266212,"y":-81.05035366841344,"zoom":0.5706292789241564}},"description":"","name":"Improved Memory Chatbot","last_tested_version":"1.0.18","endpoint_name":null,"is_component":false}